import pytest

from pattern import Pattern


def init_fsa(states=4):
    return [[[] for _ in range(len(Pattern.ALPHA_DICT.keys()))] for _ in range(states)]


@pytest.mark.parametrize('pattern, items',
                         [
                             ["abc", ['a', 'b', 'c']],
                             ['a*', ['a*']],
                             ['.*', ['.*']],
                             ['c*a*b', ['c*', 'a*', 'b']],
                             ['a*aa', ['a*', 'a', 'a']]
                         ])
def test_regex_itemize(pattern, items):
    pat = Pattern(pattern)
    assert pat.items == items, "Itemize method did not function as expected"


class TestFSATablize:
    def test_abc(self):
        pat = Pattern('abc')

        table = init_fsa(3)
        table[0][0] = [1]
        table[1][1] = [2]
        table[2][2] = [3]

        assert pat.fsa == table

    def test_dot(self):
        pat = Pattern('.')

        table = init_fsa(1)
        for i in range(Pattern.ALPHA_LEN):
            table[0][i] = [1]

        assert pat.fsa == table

    def test_a_star(self):
        pat = Pattern('a*')

        table = init_fsa(1)
        table[0][0] = [0, 1]

        assert pat.fsa == table

    def test_ab_star_c(self):
        pat = Pattern('ab*c')

        table = [
            [[1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
             []],
            [[], [1], [2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
             []],
            [[], [], [3], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
             []]]

        assert pat.fsa == table

    def test_ab_star_b_star_c(self):
        pat = Pattern('ab*bc')

        table = [[[1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
                  [], []],
                 [[], [1, 2], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
                  [], [], []],
                 [[], [3], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
                  [], []],
                 [[], [], [4], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
                  [], []]]

        assert pat.fsa == table

    def test_ab_star_b_star_c_star_d(self):
        pat = Pattern('ab*c*d')

        table = [
            [[1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
             [], []],
            [[], [1], [2], [3], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
             [], []],
            [[], [], [2], [3], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
             [], []],
            [[], [], [], [4], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
             [], []]]

        assert pat.fsa == table

    def test_1(self):
        pat = Pattern('ab*c*d*e')
        
        table = [
            [[1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
             [], []],
            [[], [1], [2], [3], [4], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
             [], []],
            [[], [], [2], [3], [4], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
             [], []],
            [[], [], [], [3], [4], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
             [], []],
            [[], [], [], [], [5], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
             [], []]]

        assert pat.fsa == table

    def test_2(self):
        pat = Pattern('ab*c*d*')

        table = [
            [[1], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
             [], []],
            [[], [1, 4], [2, 4], [3, 4], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
             [], [], [], []],
            [[], [], [2, 4], [3, 4], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
             [], [], []],
            [[], [], [], [3, 4], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
             [], []]]

        assert pat.fsa == table

